name: Publish Docker image on every push to master branch

on:
  push:
    branches:
      - master

  pull_request:
    types:
      - closed

env:
  OTP_VERSION: '24.3.4.1'
  ELIXIR_VERSION: '1.13.4'
  NEXT_RELEASE_VERSION: 5.0.0
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  push_to_registry:
    name: Push Docker image to Docker Hub
    if: github.event_name == 'push' || (github.event.pull_request.merged == true && github.base_ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    env:
       HAVE_AUTO_DELETE_OLD_VERSION_PAT: ${{ secrets.AUTO_DELETE_OLD_VERSION_PAT != '' }}
    steps:

      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=true

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            CACHE_EXCHANGE_RATES_PERIOD=
            DISABLE_READ_API=false
            API_PATH=
            NETWORK_PATH=
            DISABLE_WEBAPP=false
            DISABLE_WRITE_API=false
            CACHE_ENABLE_TOTAL_GAS_USAGE_COUNTER=
            WOBSERVER_ENABLED=false
            ADMIN_PANEL_ENABLED=false
            CACHE_ADDRESS_WITH_BALANCES_UPDATE_INTERVAL=
            DISABLE_BRIDGE_MARKET_CAP_UPDATER=false
            CACHE_BRIDGE_MARKET_CAP_UPDATE_INTERVAL=
            SOCKET_ROOT=
            CHAIN_ID=
            JSON_RPC=
            COIN_NAME=
            SUBNETWORK=

      # https://github.com/orgs/community/discussions/26716
      - name: Delete Old Package Versions (organization)
        uses: actions/github-script@v6
        if: ${{ env.HAVE_AUTO_DELETE_OLD_VERSION_PAT == 'true' }}
        continue-on-error: true
        with:
          github-token: ${{ secrets.AUTO_DELETE_OLD_VERSION_PAT }}
          script: |
            const response = await github.request("GET /orgs/${{ github.repository_owner }}/packages/container/${{ env.PACKAGE_NAME }}/versions",
              { per_page: ${{ env.PER_PAGE }}
            });
            for(version of response.data) {
                if (version.metadata.container.tags.length == 0) {
                    console.log("delete " + version.id)
                    const deleteResponse = await github.request("DELETE /orgs/${{ github.repository_owner }}/packages/container/${{ env.PACKAGE_NAME }}/versions/" + version.id, { });
                    console.log("status " + deleteResponse.status)
                }
            }
        env:
          PACKAGE_NAME: "blockscout"
          PER_PAGE: 99
          
      # https://github.com/orgs/community/discussions/26716
      - name: Delete Old Package Versions (user)
        uses: actions/github-script@v6
        if: ${{ env.HAVE_AUTO_DELETE_OLD_VERSION_PAT == 'true' }}
        continue-on-error: true
        with:
          github-token: ${{ secrets.AUTO_DELETE_OLD_VERSION_PAT }}
          script: |
            const response = await github.request("GET /user/packages/container/${{ env.PACKAGE_NAME }}/versions",
              { per_page: ${{ env.PER_PAGE }}
            });
            for(version of response.data) {
                if (version.metadata.container.tags.length == 0) {
                    console.log("delete " + version.id)
                    const deleteResponse = await github.request("DELETE /user/packages/container/${{ env.PACKAGE_NAME }}/versions/" + version.id, { });
                    console.log("status " + deleteResponse.status)
                }
            }
        env:
          PACKAGE_NAME: "blockscout"
          PER_PAGE: 99
